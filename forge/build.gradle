plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur" version "2.+"
}

loom {
    forge {
        mixinConfig "bettercombat.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${project.mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${project.mixin_extras_version}"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }

    modImplementation("dev.kosmx.player-anim:player-animation-lib-forge:${project.player_anim_version}")
    // modImplementation(files("../fabric/run/mods/dev/player-animation-lib-forge-${project.player_anim_version}.jar"))
    modApi("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")

    shadowCommon(common("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}"))
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
    inputs.property "META-INF/mods.toml", project.version
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
    relocate 'net.fabricmc', 'net.bettercombat.fabricmc'
    relocate 'net.tinyconfig', 'net.bettercombat.tinyconfig'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

task renameJarForPublication(type: Zip, dependsOn: remapJar) {
    from remapJar.archiveFile.map { zipTree(it) }
    // extension "jar"
    metadataCharset "UTF-8"
    destinationDirectory = base.libsDirectory
    archiveClassifier.set(project.name)
}

assemble.dependsOn renameJarForPublication

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

if(project.hasProperty('release_type')) {
    tasks.register("publishMod") {
        dependsOn(build)
        finalizedBy(tasks.curseforge)
        finalizedBy(tasks.modrinth)
    }

    curseforge {
        apiKey = System.getenv("CURSEFORGE_API_KEY")
        project {
            id = '639842'
            changelog = changelog_last_section()
            changelogType = 'markdown'
            releaseType = release_type
            addGameVersion "${rootProject.minecraft_version}"
            addGameVersion "1.20"
            addGameVersion "Forge"

            relations {
                requiredDependency 'cloth-config'
                requiredDependency 'playeranimator'
            }

            mainArtifact(remapJar)
            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
            options {
                forgeGradleIntegration = false
            }
        }
    }

    modrinth {
        token = System.getenv("MODRINTH_API_KEY")
        projectId = "better-combat" // This can be the project ID or the slug. Either will work!
        changelog = changelog_last_section()
        versionName = "${project.version}"
        versionNumber = "${project.version}-forge" // You don't need to set this manually. Will fail if Modrinth has this version already
        versionType = release_type // This is the default -- can also be `beta` or `alpha`
        uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
        gameVersions = ["${rootProject.minecraft_version}", "1.20"] // Must be an array, even with only one version
        loaders = ["forge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
        dependencies { // A special DSL for creating dependencies
            // scope.type
            // The scope can be `required`, `optional`, `incompatible`, or `embedded`
            // The type can either be `project` or `version`
            required.project "cloth-config"
            required.project "playeranimator"
        }
    }
}
